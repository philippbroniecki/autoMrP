# f1 <- tp / (tp + 0.5 * (fp + fn) )
}))
state_out <- data.valid %>%
# predicted values
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
# select L2.unit, y, and predicted values
dplyr::select( !! rlang::sym(L2.unit), !! rlang::sym(y), pval ) %>%
# group by L2.unit
dplyr::group_by( !! rlang::sym(L2.unit) ) %>%
# nest data
tidyr::nest()
state_out
state_out$data[[1]]
# state-level f1 score
state_out <- data.valid %>%
# predicted values
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
# select L2.unit, y, and predicted values
dplyr::select( !! rlang::sym(L2.unit), !! rlang::sym(y), pval ) %>%
# group by L2.unit
dplyr::group_by( !! rlang::sym(L2.unit) ) %>%
# nest data
tidyr::nest() %>%
# new column with state-level f1 values
dplyr::mutate(
f1 = purrr::map(data, function(x){
# true positives
tp <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 1) %>%
dplyr::summarise(tp = sum(pval)) %>%
dplyr::pull(var = tp)
# false positives
fp <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 0 ) %>%
dplyr::summarise(fp = sum(pval)) %>%
dplyr::pull(var = fp)
# false negatives
fn <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 0 & !! rlang::sym(y) == 1 ) %>%
dplyr::summarise(fn = sum(!! rlang::sym(y))) %>%
dplyr::pull(var = fn)
# f1 score
f1 <- tp / (tp + 0.5 * (fp + fn) ) })) %>%
# unnest f1 values
tidyr::unnest(f1) %>%
dplyr::select( !! rlang::sym(L2.unit), f1 ) %>%
dplyr::ungroup() %>%
dplyr::summarise(f1 = mean(f1), .groups = "drop")
state_out
# state-level f1 score
state_out <- data.valid %>%
# predicted values
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
# select L2.unit, y, and predicted values
dplyr::select( !! rlang::sym(L2.unit), !! rlang::sym(y), pval ) %>%
# group by L2.unit
dplyr::group_by( !! rlang::sym(L2.unit) ) %>%
# nest data
tidyr::nest() %>%
# new column with state-level f1 values
dplyr::mutate(
f1 = purrr::map(data, function(x){
# true positives
tp <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 1) %>%
dplyr::summarise(tp = sum(pval)) %>%
dplyr::pull(var = tp)
# false positives
fp <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 0 ) %>%
dplyr::summarise(fp = sum(pval)) %>%
dplyr::pull(var = fp)
# false negatives
fn <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 0 & !! rlang::sym(y) == 1 ) %>%
dplyr::summarise(fn = sum(!! rlang::sym(y))) %>%
dplyr::pull(var = fn)
# f1 score
f1 <- tp / (tp + 0.5 * (fp + fn) ) })) %>%
# unnest f1 values
tidyr::unnest(f1) %>%
dplyr::select( !! rlang::sym(L2.unit), f1 ) %>%
dplyr::ungroup() %>%
dplyr::summarise(f1 = mean(f1, na.rm = TRUE), .groups = "drop")
state_out
# true positives
tp_ind <- data.valid %>%
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 1) %>%
dplyr::summarise(tp = sum(pval)) %>%
dplyr::pull(var = tp)
# false positives
fp_ind <- data.valid %>%
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 0 ) %>%
dplyr::summarise(fp = sum(pval)) %>%
dplyr::pull(var = fp)
# false negatives
fn_ind <- data.valid %>%
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 0 & !! rlang::sym(y) == 1 ) %>%
dplyr::summarise(fn = sum(!! rlang::sym(y))) %>%
dplyr::pull(var = fn)
# f1 score
f1 <- tp_ind / (tp_ind + 0.5 * (fp_ind + fn_ind) )
# state-level f1 score
state_out <- data.valid %>%
# predicted values
dplyr::mutate(pval = ifelse(test = pred > 0.5, yes = 1, no = 0)) %>%
# select L2.unit, y, and predicted values
dplyr::select( !! rlang::sym(L2.unit), !! rlang::sym(y), pval ) %>%
# group by L2.unit
dplyr::group_by( !! rlang::sym(L2.unit) ) %>%
# nest data
tidyr::nest() %>%
# new column with state-level f1 values
dplyr::mutate(
f1 = purrr::map(data, function(x){
# true positives
tp <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 1) %>%
dplyr::summarise(tp = sum(pval)) %>%
dplyr::pull(var = tp)
# false positives
fp <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 1 & !! rlang::sym(y) == 0 ) %>%
dplyr::summarise(fp = sum(pval)) %>%
dplyr::pull(var = fp)
# false negatives
fn <- x %>%
dplyr::select( !! rlang::sym(y), pval ) %>%
dplyr::filter(pval == 0 & !! rlang::sym(y) == 1 ) %>%
dplyr::summarise(fn = sum(!! rlang::sym(y))) %>%
dplyr::pull(var = fn)
# f1 score
f1 <- tp / (tp + 0.5 * (fp + fn) ) })) %>%
# unnest f1 values
tidyr::unnest(f1) %>%
dplyr::select( !! rlang::sym(L2.unit), f1 ) %>%
dplyr::ungroup() %>%
dplyr::summarise(f1 = mean(f1, na.rm = TRUE), .groups = "drop")
# return
out <- dplyr::tibble(
measure = c("f1", "f1"),
value = c(1 - f1, 1 - dplyr::pull(.data = state_out, var = f1)),
level = c("individuals", "L2 units"))
out
library(autoMrP)
rm(list=ls())
# arguments
seed <- NULL
y = "YES"
L1.x = c("L1x1", "L1x2", "L1x3")
L2.x = c("L2.x1", "L2.x2", "L2.x3", "L2.x4", "L2.x5", "L2.x6")
#L2.x = c("L2.x1", "L2.x2")
mrp.L2.x = NULL
L2.unit = "state"
L2.reg = "region"
L2.x.scale = TRUE
pcs = NULL
folds = NULL
bin.proportion = "proportion"
bin.size = NULL
survey = autoMrP::taxes_survey
census = autoMrP::taxes_census
ebma.size = 1/3
k.folds = 5
cv.sampling = "L2 units"
loss.unit = c("individuals", "L2 units")
loss.fun = c("MSE", "MAE", "cross-entropy")
# switch for classifiers
best.subset = TRUE
lasso = TRUE
pca = TRUE
gb = TRUE
svm = TRUE
# the standard MRP model
mrp = TRUE
forward.select = FALSE
best.subset.L2.x = NULL
lasso.L2.x = NULL
pca.L2.x = NULL
gb.L2.x = NULL
svm.L2.x = NULL
# Standard MrP model L2 variables
gb.L2.unit = FALSE
gb.L2.reg = TRUE
# tuning params lasso
#lasso.lambda = list(c(0.1, 0.3, 1), c(1, 10, 10000))
lasso.lambda = NULL #1/exp(-seq(from = -1, to = 4.5, length = 100))
lasso.n.iter = NULL
# tuning params boosting
gb.interaction.depth = c(1, 2, 3)
gb.shrinkage = c(0.04, 0.01, 0.008, 0.005, 0.001)
gb.n.trees.init = 50
gb.n.trees.increase = 50
gb.n.trees.max = 1000
#gb.n.iter = 70
gb.n.minobsinnode = 5
svm.kernel = "radial"
svm.loss.fun = NULL
svm.gamma = NULL
svm.cost = NULL #  .1 #c(1, 2, 5, 10)
ebma.n.draws = 1
ebma.tol = c(0.01, 0.005, 0.001, 0.0005, 0.0001, 0.00005, 0.00001)
uncertainty = FALSE
boot.iter <- NULL
seed = 2
verbose = FALSE
cores = 6
svm.L2.reg = TRUE
svm.L2.unit = TRUE
oversampling <- FALSE
# data
survey <- autoMrP::taxes_survey
census <- autoMrP::taxes_census
# load all package functions
devtools::load_all()
# Check seed argument and set seed
if (is.null(seed)) { seed <- 546213978 }
set.seed(seed)
# Coerce individual-level variables and geographic variables to factors in
# survey and census data
survey <- survey %>%
dplyr::mutate_at(.vars = c(L1.x, L2.unit, L2.reg), .funs = as.factor)
census <- census %>%
dplyr::mutate_at(.vars = c(L1.x, L2.unit, L2.reg), .funs = as.factor)
# If not provided in census data, calculate bin size and bin proportion for
# each ideal type in a geographic unit
if (is.null(bin.proportion)) {
if (is.null(bin.size)) {
census <- census %>%
dplyr::group_by(.dots = c(L1.x, L2.unit)) %>%
dplyr::summarise(n = dplyr::n())
} else {
census$n <- census[[bin.size]]
}
census <- census %>%
dplyr::group_by(.dots = L2.unit) %>%
dplyr::mutate(prop = n / sum(n))
} else {
census <- census %>%
dplyr::rename(prop = one_of(bin.proportion))
}
# If not provided in survey and census data, compute the principal components
# of context-level variables
if (is.null(pcs)) {
# Determine context-level covariates whose principal components are to be
# computed
if (is.null(pca.L2.x)) {
pca.L2.x <- L2.x
}
# Compute principal components for survey data
pca_out <- stats::prcomp(survey[, pca.L2.x],
retx = TRUE,
center = TRUE,
scale. = TRUE,
tol = NULL)
# Add PCs to survey data
survey <- survey %>%
dplyr::bind_cols(as.data.frame(pca_out$x))
# Add PCs to census data
pc_names <- colnames(pca_out$x)
census <- census %>%
dplyr::left_join(unique(survey %>% dplyr::select(all_of(L2.unit),
all_of(pc_names))),
by = L2.unit)
} else {
pc_names <- pcs
}
# Scale context-level variables in survey and census data
if (isTRUE(L2.x.scale)) {
survey[, L2.x] <- scale(survey[, L2.x], center = TRUE, scale = TRUE)
census[, L2.x] <- scale(census[, L2.x], center = TRUE, scale = TRUE)
}
# Convert survey and census data to tibble
survey <- tibble::as_tibble(x = survey)
census <- tibble::as_tibble(x = census)
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
os <- dplyr::slice_sample(.data = os, n = base::ceiling(base::nrow(os) /2), replace = TRUE)
})) %>%
tidyr::unnest(os) %>%
dplyr::select(-2) %>%
dplyr::ungroup()
phil
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
}))
phil
phil$os[[1]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
n <- dplyr::mutate(.data = os, n = dplyr::n())
}))
phil
phil$os[[1]]
phil$os[[1]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- dplyr::mutate(.data = os, n = dplyr::n())
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
}))
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- dplyr::mutate(.data = x, n = dplyr::n())
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
}))
phil$os[[1]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
os <- dplyr::mutate(.data = x, n = dplyr::n())
os <- dplyr::group_by(.data = os, !! rlang::sym(y) )
}))
phil$os[[1]]
print(phil$os[[1]], n = 30)
print(phil$os[[1]], n = 40)
phil$os[[1]]
phil$os[[2]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
}))
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
}))
phil$os[[2]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
#y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
#y_0 <- n - y_1
#y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
#n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
}))
phil$os[[2]]
table(phil$os[[2]]$YES)
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
#n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
}))
phil
phil$os[[2]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
}))
phil$os[[2]]
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
})) %>%
dplyr::mutate(combined = dplyr::bind_rows(data, os))
survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
}))
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
})) %>%
dplyr::mutate(combined = purrr::map2_df(data, os, dplyr::bind_rows ))
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
})) %>%
dplyr::mutate(combined = purrr::map2_df(data, os, ~ . dplyr::bind_rows ))
phil <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
})) %>%
dplyr::mutate(combined = purrr::map2_df(data, os, function(x,y){
combined <- dplyr::bind_rows(x, y)
}))
add_rows <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
})) %>%
tidyr::unnest(os)
add_rows
add_rows <- survey %>%
dplyr::group_by( .dots = L2.unit ) %>%
tidyr::nest() %>%
dplyr::mutate(os = purrr:::map(data, function( x ){
n <- nrow(x)
os <- dplyr::group_by(.data = x, !! rlang::sym(y) )
y_1 <- sum(dplyr::pull(.data = os, var = !! rlang::sym(y)))
y_0 <- n - y_1
y_needed <- ifelse(test = y_1 > y_0, yes = 0, no = 1)
n_needed <- ifelse(test = y_needed == 0, yes = y_1 - y_0, no = y_0 - y_1)
os <- dplyr::filter(.data = os, !! rlang::sym(y) == y_needed )
os <- dplyr::slice_sample(.data = os, replace = TRUE, n = n_needed)
})) %>%
tidyr::unnest(os) %>%
dplyr::ungroup()
add_rows
test <- dplyr::bind_rows(survey, add_rows)
test
